// Generated by CoffeeScript 1.10.0
(function() {
  var A_SIZE, AppHandler, CLAUSE, CROSS1, CROSS2, GADGETS, SCALE, SPLIT, STYLES, U_SIZE;

  U_SIZE = 8;

  A_SIZE = 20;

  SCALE = 50;

  STYLES = {
    ar: 'stroke: none;',
    vr: 'stroke: none; opacity: 0.5',
    br: 'stroke: gray; fill:none; stroke-width: 0.1',
    mr: 'stroke: black; fill: white; stroke-width: 0.1',
    v: 'stroke: blue; fill:none; stroke-width: 0.5',
    m: 'stroke:  red; fill:none; stroke-width: 0.5',
    t: 'marker-end:url(#head);',
    f: 'marker-start:url(#head);',
    u: "transform:scale(" + (1 / U_SIZE) + ")",
    a: "transform:scale(" + (1 / A_SIZE) + ")"
  };

  GADGETS = {
    u_straight: {
      br: 'M-4, 0 L 4, 0 L 4, 4 L-4, 4 Z',
      vr: 'M-1, 0 L-1, 4 L 1, 4 L 1, 0 Z',
      c1: 'M 1, 0 L 1, 4',
      c2: 'M-1, 0 L-1, 4'
    },
    u_split: {
      br: 'M-4,-4 L 4,-4 L-4, 4 Z',
      vr: 'M-1,-4 L 1,-4 L 1,-1 L-1,-1 Z M-4,-1 L-1,-1 L-1, 1 L-4, 1 Z',
      c1: 'M 1,-4 L 1,-1 L-1, 1 M-4,-1 L-1,-1',
      c2: 'M-1,-4 L-1, 1 L-4, 1 M-1,-1 L 1,-1'
    },
    u_cross1: {
      br: 'M-4,-4 L 4,-4 L 4, 4 L-4, 4 Z',
      vr: 'M-4,-1 L-1,-1 L-1, 1 L-4, 1 Z M 1,-1 L 4,-1 L 4, 1 L 1, 1 Z',
      c1: 'M-4,-1 L 4,-1',
      c2: 'M-4, 1 L 4, 1'
    },
    u_cross2: {
      br: 'M-4,-4 L 4,-4 L 4, 4 L-4, 4 Z',
      vr: 'M-1,-4 L-1,-1 L 1,-1 L 1,-4 Z M-1, 1 L-1, 4 L 1, 4 L 1, 1 Z',
      c1: 'M 1,-4 L 1,-1 M-1,-1 L-1, 1 M 1, 1 L 1, 4',
      c2: 'M-1,-4 L-1,-1 M 1,-1 L 1, 1 M-1, 1 L-1, 4'
    },
    u_clause1: {
      br: 'M-12,-8 L 4,-8 L 4, 4 L-4, 4 L-12,-4 Z',
      vr: 'M -5,-8 L-5,-5 L-1,-5 L-1,-8 Z M -9,-1 L-5,-5 L-3,-3 L-7, 1 Z M -1,-5 L-3,-3 L-1,-1 L 3,-1 Z',
      c1: 'M -1,-8 L-1,-5 L-7, 1 M-5,-5 L-3,-3 M-1,-5 L 3,-1',
      c2: 'M -5,-8 L-5,-5 L-9,-1 M-5,-5 L-1,-5 M-3,-3 L-1,-1 L 3,-1'
    },
    u_clause2: {
      br: 'M-4,-4 L 4,-4 L 4, 4 L-4, 4 Z',
      vr: 'M-1, 4 L-1,-1 L 1, 1 L 1, 4 Z',
      c1: 'M-1,-1 L-1, 4',
      c2: 'M-1,-1 L 1, 1 L 1, 4'
    },
    u_clause3: {
      br: 'M-4,-4 L 4,-4 L 4, 4 L-4, 4 Z',
      vr: 'M 4,-1 L 3,-1 L 1, 1 L 4, 1',
      c1: 'M 1, 1 L 4, 1',
      c2: 'M 4,-1 L 3,-1 L 1, 1'
    },
    a_straight: {
      ar: 'M-3.5, 5 L 3.5, 5',
      br: 'M-10, 0 L10, 0 L10,10 L-10,10 Z',
      vr: 'M -5, 0 L-5,10 L 5,10 L 5, 0 Z',
      c1: 'M -2, 0 L-2,10 M 2, 0 L 2,10',
      c2: 'M -5, 0 L-5,10 M 5, 0 L 5,10'
    },
    a_split1: {
      ar: 'M-3.5, 8 L3.5, 8',
      br: 'M 0, 0 L10,10 L-10,10 Z',
      vr: 'M 5,10 L-5,10 L-5, 5 L-1, 5 L 2, 8 L 5, 5',
      c1: 'M 2,10 L 2, 8 L 5, 5 M 2, 8 L-1, 5 M-2,10 L-2, 5 M 2, 7 L 2, 5 M-2, 2 L 2, 2 L 2, 3 L 4, 5 M 2, 3 L-0, 5 M-2, 2 L-5, 5',
      c2: 'M 5,10 L 5, 5 L-5, 5 L-5,10 M 2, 8 L 2, 7 L 4, 5 M 2, 7 L 0, 5 M-2, 5 L-2, 2 M 2, 5 L 2, 3 M 2, 2 L-1, 5'
    },
    a_split2: {
      ar: 'M 3.5, 8 L-3.5, 8',
      br: 'M 0, 0 L10,10 L-10,10 Z',
      vr: 'M 5,10 L-5,10 L-5, 5 L-1, 5 L 2, 8 L 5, 5',
      c1: 'M 2,10 L 2, 8 L 5, 5 M 2, 8 L-1, 5 M-2,10 L-2, 5 M 2, 7 L 2, 5 M-2, 2 L 2, 2 L 2, 3 L 4, 5 M 2, 3 L-0, 5 M-2, 2 L-5, 5',
      c2: 'M 5,10 L 5, 5 L-5, 5 L-5,10 M 2, 8 L 2, 7 L 4, 5 M 2, 7 L 0, 5 M-2, 5 L-2, 2 M 2, 5 L 2, 3 M 2, 2 L-1, 5'
    },
    a_clause: {
      ar: 'M-3.5, 8 L3.5, 8',
      br: 'M-10,10 L10,10 L 0, 0 Z',
      vr: 'M -5,10 L 5,10 L 5, 5 L 2, 8 L-2, 8 L-5, 5',
      c1: 'M -2,10 L-2, 8 L-5, 5 M-2, 8 L 2, 8 M 2,10 L 2, 8 L 5, 5 M -1, 7 L-1, 5 M 1, 7 L 1, 5 M-3, 5 L-1, 3 L 1, 3 L 3, 5 M -1, 3 L-2, 2 M 1, 3 L 2, 2',
      c2: 'M -5,10 L-5, 5 L 5, 5 L 5,10 M-2, 8 L-1, 7 L-3, 5 M -1, 7 L 1, 7 M  2, 8 L 1, 7 L 3, 5 M-1, 5 L-1, 3 M 1, 5 L 1, 3'
    },
    a_cross1: {
      ar: 'M-3.5, 8 L3.5, 8',
      br: 'M10,10 L-10,10 L-10, 0 L10, 0 Z',
      vr: 'M 5,10 L 5,  5 L-5,  5 L-5,10 Z',
      c1: 'M 2,10 L 2,  0 M-2, 10 L-2, 0',
      c2: 'M 5,10 L 5,  0 M-5, 10 L-5, 0'
    },
    a_cross2: {
      ar: 'M-3.5, 8 L3.5, 8',
      br: 'M10,10 L-10,10 L-10, 0 L10, 0 Z',
      vr: 'M 5,10 L 5, 5 L-5, 5 L-5,10 Z',
      c1: 'M 2,10 L 2, 5 M-2,10 L-2, 5 M 5, 5 L 5, 2 M 2, 2 L 2, 0 M-5, 5 L-5, 2 M-2, 2 L-2, 0',
      c2: 'M 5,10 L 5, 5 M-5,10 L-5, 5 M 2, 5 L 2, 2 M-2, 5 L-2, 2 M-5, 2 L-5, 0 M 5, 2 L 5, 0'
    }
  };

  CLAUSE = {
    u: [
      {
        n: 'cross1',
        v: 0,
        x: 0,
        y: 0,
        a: 225,
        f: 1,
        s: Math.sqrt(2)
      }, {
        n: 'straight',
        v: 0,
        x: 1,
        y: 1,
        a: 135,
        f: 1,
        s: Math.sqrt(2)
      }, {
        n: 'split',
        v: 0,
        x: 1,
        y: 1,
        a: 180,
        f: 1,
        s: 1
      }, {
        n: 'split',
        v: 0,
        x: 2,
        y: 1,
        a: 180,
        f: -1,
        s: 1
      }, {
        n: 'clause1',
        v: 0,
        x: 3,
        y: 1,
        a: 0,
        f: 1,
        s: 1
      }, {
        n: 'clause2',
        v: 1,
        x: 3,
        y: 1,
        a: 0,
        f: 1,
        s: 1
      }, {
        n: 'clause3',
        v: 2,
        x: 3,
        y: 1,
        a: 0,
        f: 1,
        s: 1
      }, {
        n: 'cross1',
        v: 2,
        x: 4,
        y: 1,
        a: 180,
        f: 1,
        s: 1
      }, {
        n: 'cross2',
        v: 1,
        x: 4,
        y: 1,
        a: 0,
        f: 1,
        s: 1
      }, {
        n: 'straight',
        v: 1,
        x: 4,
        y: 0,
        a: 0,
        f: 1,
        s: 1
      }, {
        n: 'cross1',
        v: 2,
        x: 5,
        y: 1,
        a: 180,
        f: 1,
        s: 1
      }, {
        n: 'cross2',
        v: 2,
        x: 5,
        y: 1,
        a: 180,
        f: 1,
        s: 1
      }, {
        n: 'straight',
        v: 2,
        x: 5,
        y: 0,
        a: 0,
        f: -1,
        s: 1
      }, {
        n: 'split',
        v: 2,
        x: 6,
        y: 1,
        a: 180,
        f: -1,
        s: 1
      }, {
        n: 'straight',
        v: 2,
        x: 6,
        y: 1,
        a: 135,
        f: -1,
        s: Math.sqrt(2)
      }, {
        n: 'cross2',
        v: 2,
        x: 7,
        y: 0,
        a: 45,
        f: 1,
        s: Math.sqrt(2)
      }
    ],
    a: [
      {
        n: 'cross1',
        v: 0,
        x: 0,
        y: 0,
        a: 45,
        f: -1,
        s: Math.sqrt(2)
      }, {
        n: 'cross1',
        v: 0,
        x: 0,
        y: 0,
        a: 135,
        f: 1,
        s: Math.sqrt(2)
      }, {
        n: 'straight',
        v: 0,
        x: 1,
        y: 1,
        a: 135,
        f: 1,
        s: Math.sqrt(2)
      }, {
        n: 'split2',
        v: 0,
        x: 1,
        y: 1,
        a: 0,
        f: 1,
        s: 1
      }, {
        n: 'split1',
        v: 0,
        x: 1,
        y: 1,
        a: 90,
        f: -1,
        s: 1
      }, {
        n: 'split2',
        v: 0,
        x: 2,
        y: 1,
        a: 0,
        f: -1,
        s: 1
      }, {
        n: 'split1',
        v: 0,
        x: 2,
        y: 1,
        a: 90,
        f: 1,
        s: 1
      }, {
        n: 'split1',
        v: 0,
        x: 2.5,
        y: 0.5,
        a: 45,
        f: 1,
        s: Math.sqrt(2)
      }, {
        n: 'split2',
        v: 0,
        x: 2.5,
        y: 0.5,
        a: 45,
        f: -1,
        s: Math.sqrt(2)
      }, {
        n: 'straight',
        v: 0,
        x: 2.5,
        y: 0.5,
        a: 180,
        f: -1,
        s: 2
      }, {
        n: 'clause',
        v: 1,
        x: 3,
        y: 1,
        a: 0,
        f: -1,
        s: 1
      }, {
        n: 'clause',
        v: 2,
        x: 3,
        y: 1,
        a: 90,
        f: -1,
        s: 1
      }, {
        n: 'cross1',
        v: 1,
        x: 4,
        y: 1,
        a: 0,
        f: 1,
        s: 1
      }, {
        n: 'cross2',
        v: 2,
        x: 4,
        y: 1,
        a: 90,
        f: 1,
        s: 1
      }, {
        n: 'cross1',
        v: 1,
        x: 4,
        y: 1,
        a: 180,
        f: -1,
        s: 1
      }, {
        n: 'cross2',
        v: 2,
        x: 4,
        y: 1,
        a: 90,
        f: -1,
        s: 1
      }, {
        n: 'straight',
        v: 1,
        x: 4,
        y: 0,
        a: 0,
        f: 1,
        s: 1
      }, {
        n: 'cross1',
        v: 2,
        x: 5,
        y: 1,
        a: 0,
        f: -1,
        s: 1
      }, {
        n: 'cross2',
        v: 2,
        x: 5,
        y: 1,
        a: 90,
        f: 1,
        s: 1
      }, {
        n: 'cross1',
        v: 2,
        x: 5,
        y: 1,
        a: 180,
        f: 1,
        s: 1
      }, {
        n: 'cross2',
        v: 2,
        x: 5,
        y: 1,
        a: 90,
        f: -1,
        s: 1
      }, {
        n: 'straight',
        v: 2,
        x: 5,
        y: 0,
        a: 0,
        f: -1,
        s: 1
      }, {
        n: 'split2',
        v: 2,
        x: 6,
        y: 1,
        a: 0,
        f: -1,
        s: 1
      }, {
        n: 'split1',
        v: 2,
        x: 6,
        y: 1,
        a: 90,
        f: 1,
        s: 1
      }, {
        n: 'straight',
        v: 2,
        x: 6,
        y: 1,
        a: 135,
        f: -1,
        s: Math.sqrt(2)
      }, {
        n: 'cross2',
        v: 2,
        x: 7,
        y: 0,
        a: 45,
        f: 1,
        s: Math.sqrt(2)
      }, {
        n: 'cross2',
        v: 2,
        x: 7,
        y: 0,
        a: 135,
        f: -1,
        s: Math.sqrt(2)
      }
    ]
  };

  CROSS1 = {
    u: [
      {
        n: 'cross1',
        v: 1,
        x: 0,
        y: 0,
        a: 0,
        f: 1,
        s: 1
      }, {
        n: 'cross2',
        v: 0,
        x: 0,
        y: 0,
        a: 0,
        f: -1,
        s: 1
      }, {
        n: 'cross1',
        v: 1,
        x: 1,
        y: 0,
        a: 0,
        f: 1,
        s: 1
      }, {
        n: 'cross2',
        v: 0,
        x: 1,
        y: 0,
        a: 0,
        f: 1,
        s: 1
      }
    ],
    a: [
      {
        n: 'cross1',
        v: 0,
        x: 0,
        y: 0,
        a: 0,
        f: -1,
        s: 1
      }, {
        n: 'cross2',
        v: 1,
        x: 0,
        y: 0,
        a: 270,
        f: 1,
        s: 1
      }, {
        n: 'cross1',
        v: 0,
        x: 0,
        y: 0,
        a: 180,
        f: 1,
        s: 1
      }, {
        n: 'cross2',
        v: 1,
        x: 0,
        y: 0,
        a: 270,
        f: -1,
        s: 1
      }, {
        n: 'cross1',
        v: 0,
        x: 1,
        y: 0,
        a: 0,
        f: 1,
        s: 1
      }, {
        n: 'cross2',
        v: 1,
        x: 1,
        y: 0,
        a: 270,
        f: 1,
        s: 1
      }, {
        n: 'cross1',
        v: 0,
        x: 1,
        y: 0,
        a: 180,
        f: -1,
        s: 1
      }, {
        n: 'cross2',
        v: 1,
        x: 1,
        y: 0,
        a: 270,
        f: -1,
        s: 1
      }
    ]
  };

  CROSS2 = {
    u: [
      {
        n: 'cross1',
        v: 1,
        x: 0,
        y: 0,
        a: 0,
        f: 1,
        s: 1
      }, {
        n: 'cross2',
        v: 0,
        x: 0,
        y: 0,
        a: 180,
        f: -1,
        s: 1
      }, {
        n: 'cross1',
        v: 1,
        x: 1,
        y: 0,
        a: 0,
        f: 1,
        s: 1
      }, {
        n: 'cross2',
        v: 0,
        x: 1,
        y: 0,
        a: 180,
        f: 1,
        s: 1
      }
    ],
    a: [
      {
        n: 'cross1',
        v: 0,
        x: 0,
        y: 0,
        a: 0,
        f: 1,
        s: 1
      }, {
        n: 'cross2',
        v: 1,
        x: 0,
        y: 0,
        a: 270,
        f: 1,
        s: 1
      }, {
        n: 'cross1',
        v: 0,
        x: 0,
        y: 0,
        a: 180,
        f: -1,
        s: 1
      }, {
        n: 'cross2',
        v: 1,
        x: 0,
        y: 0,
        a: 270,
        f: -1,
        s: 1
      }, {
        n: 'cross1',
        v: 0,
        x: 1,
        y: 0,
        a: 0,
        f: -1,
        s: 1
      }, {
        n: 'cross2',
        v: 1,
        x: 1,
        y: 0,
        a: 270,
        f: 1,
        s: 1
      }, {
        n: 'cross1',
        v: 0,
        x: 1,
        y: 0,
        a: 180,
        f: 1,
        s: 1
      }, {
        n: 'cross2',
        v: 1,
        x: 1,
        y: 0,
        a: 270,
        f: -1,
        s: 1
      }
    ]
  };

  SPLIT = {
    u: [
      {
        n: 'split',
        v: 0,
        x: -0.5,
        y: 0,
        a: 315,
        f: -1,
        s: 1 / Math.sqrt(2)
      }, {
        n: 'split',
        v: 1,
        x: 0,
        y: -0.5,
        a: 225,
        f: 1,
        s: 1 / Math.sqrt(2)
      }, {
        n: 'split',
        v: 1,
        x: 0,
        y: 0.5,
        a: 45,
        f: 1,
        s: 1 / Math.sqrt(2)
      }, {
        n: 'cross1',
        v: 1,
        x: 0.5,
        y: 0,
        a: 225,
        f: 1,
        s: 1 / Math.sqrt(2)
      }, {
        n: 'cross2',
        v: 0,
        x: 0.5,
        y: 0,
        a: 45,
        f: 1,
        s: 1 / Math.sqrt(2)
      }, {
        n: 'split',
        v: 1,
        x: 1,
        y: -0.5,
        a: 225,
        f: -1,
        s: 1 / Math.sqrt(2)
      }, {
        n: 'split',
        v: 0,
        x: 1.5,
        y: 0,
        a: 315,
        f: 1,
        s: 1 / Math.sqrt(2)
      }, {
        n: 'split',
        v: 1,
        x: 1,
        y: 0.5,
        a: 45,
        f: -1,
        s: 1 / Math.sqrt(2)
      }
    ],
    a: [
      {
        n: 'split1',
        v: 0,
        x: -0.5,
        y: 0,
        a: 315,
        f: 1,
        s: 1 / Math.sqrt(2)
      }, {
        n: 'split1',
        v: 1,
        x: 0,
        y: -0.5,
        a: 45,
        f: -1,
        s: 1 / Math.sqrt(2)
      }, {
        n: 'split1',
        v: 1,
        x: 0,
        y: 0.5,
        a: 225,
        f: -1,
        s: 1 / Math.sqrt(2)
      }, {
        n: 'split2',
        v: 0,
        x: -0.5,
        y: 0,
        a: 135,
        f: -1,
        s: 1 / Math.sqrt(2)
      }, {
        n: 'split2',
        v: 1,
        x: 0,
        y: -0.5,
        a: 45,
        f: 1,
        s: 1 / Math.sqrt(2)
      }, {
        n: 'split2',
        v: 1,
        x: 0,
        y: 0.5,
        a: 225,
        f: 1,
        s: 1 / Math.sqrt(2)
      }, {
        n: 'cross1',
        v: 1,
        x: 0.5,
        y: 0,
        a: 45,
        f: -1,
        s: 1 / Math.sqrt(2)
      }, {
        n: 'cross1',
        v: 0,
        x: 0.5,
        y: 0,
        a: 135,
        f: 1,
        s: 1 / Math.sqrt(2)
      }, {
        n: 'cross2',
        v: 1,
        x: 0.5,
        y: 0,
        a: 135,
        f: -1,
        s: 1 / Math.sqrt(2)
      }, {
        n: 'cross2',
        v: 0,
        x: 0.5,
        y: 0,
        a: 45,
        f: 1,
        s: 1 / Math.sqrt(2)
      }, {
        n: 'split1',
        v: 1,
        x: 1,
        y: -0.5,
        a: 45,
        f: 1,
        s: 1 / Math.sqrt(2)
      }, {
        n: 'split1',
        v: 0,
        x: 1.5,
        y: 0,
        a: 315,
        f: -1,
        s: 1 / Math.sqrt(2)
      }, {
        n: 'split1',
        v: 1,
        x: 1,
        y: 0.5,
        a: 225,
        f: 1,
        s: 1 / Math.sqrt(2)
      }, {
        n: 'split2',
        v: 0,
        x: 1.5,
        y: 0,
        a: 135,
        f: 1,
        s: 1 / Math.sqrt(2)
      }, {
        n: 'split2',
        v: 1,
        x: 1,
        y: -0.5,
        a: 45,
        f: -1,
        s: 1 / Math.sqrt(2)
      }, {
        n: 'split2',
        v: 1,
        x: 1,
        y: 0.5,
        a: 225,
        f: -1,
        s: 1 / Math.sqrt(2)
      }
    ]
  };

  AppHandler = (function() {
    function AppHandler() {
      var c, i, key, l, len, len1, m, ref, ref1, style;
      this.cat = function(a, b) {
        return a.concat(b);
      };
      this.vars = [true, true, true, true, true, true, true, true, true, true];
      this.clauses = [[0, 5, 2], [4, 7, 9], [3, 8, 0], [6, 2, 1], [4, 7, 3], [1, 5, 9]];
      this.colors = this.get_colors(4);
      this.svg = d3.select('#main').attr('width', ((7 * this.clauses.length + 2) * SCALE) + "px").attr('height', ((2 * this.vars.length + 6) * SCALE) + "px").attr('stroke-linecap', 'round').attr('stroke-linejoin', 'round');
      for (key in STYLES) {
        style = STYLES[key];
        this.add_style(key, "." + key, style);
      }
      this.update_vars_style();
      this.defs = this.svg.append('defs');
      this.initialize_defs();
      this.initialize_gadgets();
      this.update_vars_assignment();
      this.canvas = this.svg.append('g').attr('id', 'canvas').attr('transform', "scale(" + SCALE + ")");
      this.unassigned = this.canvas.append('g').attr('id', 'unassigned').attr('transform', "translate(1,1)");
      ref = this.clauses;
      for (i = l = 0, len = ref.length; l < len; i = ++l) {
        c = ref[i];
        this.add_clause(this.unassigned, 'u', i, c);
      }
      this.assigned = this.canvas.append('g').attr('id', 'assigned').attr('transform', "translate(1," + (this.vars.length + 4) + ")");
      ref1 = this.clauses;
      for (i = m = 0, len1 = ref1.length; m < len1; i = ++m) {
        c = ref1[i];
        this.add_clause(this.assigned, 'a', i, c);
      }
    }

    AppHandler.prototype.tform_from_g = function(g) {
      var tform;
      tform = "translate(" + g.x + "," + g.y + ")";
      if (g.f * g.s - 1 > 0) {
        tform = tform + (" scale(" + g.s + ")");
      }
      if (g.f * g.s - 1 < 0) {
        tform = tform + (" scale(" + (g.f * g.s) + "," + g.s + ")");
      }
      if (g.a !== 0) {
        tform = tform + (" rotate(" + g.a + ")");
      }
      return tform;
    };

    AppHandler.prototype.add_clause = function(p, t, n, c) {
      var cl, g, i, idx, j, l, last, len, len1, len2, len3, m, o, q, r, rc, ref, ref1, ref2, ref3, results, row, tform, top, u, v;
      tform = "translate(" + (n * 7) + ",0)";
      cl = p.append('g').attr('id', "c" + n).attr('transform', tform);
      top = cl.append('g').attr('id', "c" + n + "_top");
      ref = CLAUSE[t];
      for (l = 0, len = ref.length; l < len; l++) {
        g = ref[l];
        top.append('use').attr('xlink:href', "#" + t + "_" + g.n + "_v" + (c[g.v] + 1)).attr('transform', this.tform_from_g(g));
      }
      ref1 = this.vars;
      for (i = m = 0, len1 = ref1.length; m < len1; i = ++m) {
        v = ref1[i];
        row = cl.append('g').attr('id', "c" + n + "_v" + (i + 1)).attr('transform', "translate(0," + (i + 2) + ")");
        row.append('use').attr('xlink:href', "#" + t + "_straight_v" + (i + 1)).attr('transform', "rotate(270)");
        for (j = o = 0; o <= 2; j = ++o) {
          rc = row.append('g').attr('id', "c" + n + "_v" + (i + 1) + "_" + j).attr('transform', "translate(" + (2 * j + 1) + ",0)");
          if (i !== c[j]) {
            ref2 = (i < c[j] ? CROSS1[t] : CROSS2[t]);
            for (q = 0, len2 = ref2.length; q < len2; q++) {
              g = ref2[q];
              idx = g.v === 1 ? i : c[j];
              rc.append('use').attr('xlink:href', "#" + t + "_" + g.n + "_v" + (idx + 1)).attr('transform', this.tform_from_g(g));
            }
          } else {
            ref3 = SPLIT[t];
            for (r = 0, len3 = ref3.length; r < len3; r++) {
              g = ref3[r];
              rc.append('use').attr('xlink:href', "#" + t + "_" + g.n + "_v" + (i + 1)).attr('transform', this.tform_from_g(g));
            }
          }
        }
        row.append('use').attr('xlink:href', "#" + t + "_straight_v" + (i + 1)).attr('transform', "translate(7,0) rotate(90) scale(-1,1)");
      }
      last = cl.append('g').attr('id', "c" + n + "_last").attr('transform', "translate(0," + (this.vars.length + 2) + ")");
      results = [];
      for (i = u = 0; u <= 2; i = ++u) {
        last.append('use').attr('xlink:href', "#" + t + "_straight_v" + (c[i] + 1)).attr('transform', "translate(" + (i * 2 + 1) + ",0) rotate(180) scale(-1,1)");
        results.push(last.append('use').attr('xlink:href', "#" + t + "_straight_v" + (c[i] + 1)).attr('transform', "translate(" + (i * 2 + 2) + ",0) rotate(180)"));
      }
      return results;
    };

    AppHandler.prototype.get_colors = function(k) {
      var i, l, len, n, ref, results, v;
      n = k * Math.floor(this.vars.length / k) + k - 1;
      ref = this.vars;
      results = [];
      for (i = l = 0, len = ref.length; l < len; i = ++l) {
        v = ref[i];
        results.push(((Math.ceil(n / k) * i) % n) / (n + 1));
      }
      return results;
    };

    AppHandler.prototype.initialize_defs = function() {
      var d, g, gadgets, k, n;
      this.defs.append('marker').attr('id', "head").attr('viewbox', '0 0 2 2').attr('orient', 'auto').attr('refX', '1').attr('refY', '1').attr('markerWidth', '2').attr('markerHeight', '2').append('circle').attr('cx', '1').attr('cy', '1').attr('r', '0.5').attr('class', 'mr');
      gadgets = ((function() {
        var results;
        results = [];
        for (n in GADGETS) {
          g = GADGETS[n];
          results.push((function() {
            var results1;
            results1 = [];
            for (k in g) {
              d = g[k];
              results1.push({
                name: n + '_' + k,
                d: d
              });
            }
            return results1;
          })());
        }
        return results;
      })()).reduce(this.cat);
      return this.defs.selectAll('path').data(gadgets, function(g) {
        return g.name;
      }).enter().append('path').attr('vector-effect', 'non-scaling-stroke').attr('id', function(g) {
        return g.name;
      }).attr('d', function(g) {
        return g.d;
      });
    };

    AppHandler.prototype.add_style = function(id, c, style) {
      var current;
      current = this.svg.selectAll('style').filter("#" + id);
      if (current.empty()) {
        current = this.svg.append('style').attr('id', id);
      }
      return current.html(c + "{" + style + "}");
    };

    AppHandler.prototype.update_vars_style = function() {
      var c, i, l, len, ref, results, v;
      ref = this.vars;
      results = [];
      for (i = l = 0, len = ref.length; l < len; i = ++l) {
        v = ref[i];
        c = d3.interpolateRainbow(this.colors[i]);
        results.push(this.add_style("v" + (i + 1), ".v" + (i + 1) + " > .vr", "fill:" + c + ";"));
      }
      return results;
    };

    AppHandler.prototype.update_vars_assignment = function() {
      var i, l, len, ref, results, v;
      ref = this.vars;
      results = [];
      for (i = l = 0, len = ref.length; l < len; i = ++l) {
        v = ref[i];
        this.svg.selectAll('use').filter(".v" + (i + 1) + " > .u.c1").attr('class', "u c1 " + (v ? 'v' : 'm'));
        this.svg.selectAll('use').filter(".v" + (i + 1) + " > .u.c2").attr('class', "u c2 " + (v ? 'm' : 'v'));
        results.push(this.svg.selectAll('use').filter(".v" + (i + 1) + " > .a.ar").attr('class', "a ar " + (v ? 't' : 'f')));
      }
      return results;
    };

    AppHandler.prototype.initialize_gadgets = function() {
      var data, g, i, l, len, ref, results, s, v;
      ref = this.vars;
      results = [];
      for (i = l = 0, len = ref.length; l < len; i = ++l) {
        v = ref[i];
        results.push((function() {
          var results1;
          results1 = [];
          for (g in GADGETS) {
            data = ['vr', 'c1 v', 'c2 m', 'br'];
            if (g.startsWith('a')) {
              data = data.concat(['ar']);
            }
            s = g.startsWith('u') ? 1 / U_SIZE : 1 / A_SIZE;
            results1.push(this.defs.append('g').attr('id', g + "_v" + (i + 1)).attr('class', "v" + (i + 1)).selectAll('use').data(data).enter().append('use').attr('xlink:href', function(d) {
              return "#" + g + "_" + d.slice(0, 2);
            }).attr('class', function(d) {
              return g[0] + " " + d;
            }));
          }
          return results1;
        }).call(this));
      }
      return results;
    };

    return AppHandler;

  })();

  if (typeof window !== "undefined" && window !== null) {
    window.onload = function() {
      var a;
      return a = new AppHandler();
    };
  }

}).call(this);
